// <auto-generated />
using System;
using System.Collections.Generic;
using MS.API.Mini.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MS.API.Mini.Migrations
{
    [DbContext(typeof(MonitorDBContext))]
    [Migration("20250623133849_AddedCols")]
    partial class AddedCols
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MS.API.Mini.Models.Agents", b =>
                {
                    b.Property<string>("AgentID")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasAnnotation("Relational:JsonPropertyName", "AgentID");

                    b.Property<string>("AGENT_STATE")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AgentHostAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AgentHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AgentLicenseKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "AgentLicenseKey");

                    b.Property<DateTime>("AgentLicenseKeyExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "AgentLicenseKeyExpiryDate");

                    b.Property<string>("AgentPort")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("AgentVersion")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasAnnotation("Relational:JsonPropertyName", "AgentVersion");

                    b.Property<Guid>("AppOwnerID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("LastSync")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasAnnotation("Relational:JsonPropertyName", "OS");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "Organization");

                    b.Property<string>("SDKVersion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasAnnotation("Relational:JsonPropertyName", "SDKVersion");

                    b.Property<bool>("VP")
                        .HasColumnType("boolean");

                    b.HasKey("AgentID");

                    b.HasIndex("AgentID", "AgentHostAddress")
                        .IsUnique();

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("MS.API.Mini.Models.DiskData", b =>
                {
                    b.Property<string>("AgentID")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("Drive")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasAnnotation("Relational:JsonPropertyName", "Drive");

                    b.Property<string>("FormatFree")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasAnnotation("Relational:JsonPropertyName", "FreeSpaceFormatted");

                    b.Property<string>("FormatSize")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasAnnotation("Relational:JsonPropertyName", "DiskSizeFormatted");

                    b.Property<long?>("Free")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "FreeSpaceUnformatted");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "DiskSize");

                    b.Property<long?>("Used")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "Used");

                    b.HasIndex("AgentID");

                    b.ToTable("SystemDiskData");
                });

            modelBuilder.Entity("MS.API.Mini.Models.NetworkDeviceMetric", b =>
                {
                    b.Property<string>("DeviceIP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastPoll")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MetricDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetricValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SystemMonitorId")
                        .HasColumnType("uuid");

                    b.ToTable("NetworkDeviceMetricData");
                });

            modelBuilder.Entity("MS.API.Mini.Models.SystemMetric", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("AgentID")
                        .IsRequired()
                        .HasColumnType("character varying(25)");

                    b.Property<double>("CPUUsage")
                        .HasColumnType("double precision");

                    b.Property<double>("MemoryUsage")
                        .HasColumnType("double precision");

                    b.Property<long?>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<long?>("TimestampMem")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("AgentID");

                    b.ToTable("SystemMetricData");
                });

            modelBuilder.Entity("MS.API.Mini.Models.SystemMonitor", b =>
                {
                    b.Property<Guid>("SystemMonitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()")
                        .HasAnnotation("Relational:JsonPropertyName", "SystemMonitorId");

                    b.Property<string>("CheckInterval")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'*/5 * * * *'");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'{}'");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasAnnotation("Relational:JsonPropertyName", "CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasAnnotation("Relational:JsonPropertyName", "Description");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FailureCount")
                        .HasColumnType("integer");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "IPAddress");

                    b.Property<bool>("IsAcknowledged")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMonitored")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "IsMonitored");

                    b.Property<DateTime>("LastCheckTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "LastCheckTime");

                    b.Property<DateTime>("LastServiceUpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "LastServiceUpTime");

                    b.PrimitiveCollection<List<string>>("Plugins")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text[]")
                        .HasDefaultValueSql("ARRAY[]::text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "Plugins");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("3");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "ServiceName");

                    b.Property<DateTime?>("SnoozeUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SystemMonitorId");

                    b.ToTable("SystemMonitor");
                });

            modelBuilder.Entity("MS.API.Mini.Models.SystemMonitorView", b =>
                {
                    b.Property<Guid>("SystemMonitorId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "SystemMonitorId");

                    b.Property<string>("AgentAPI")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CheckInterval")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FailureCount")
                        .HasColumnType("integer");

                    b.Property<string>("HealthReport")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasAnnotation("Relational:JsonPropertyName", "HealthReport");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "IPAddress");

                    b.Property<bool>("IsAcknowledged")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMonitored")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "IsMonitored");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SnoozeUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SystemMonitorId");

                    b.ToTable((string)null);

                    b.ToView("SystemMonitorView", (string)null);
                });

            modelBuilder.Entity("MS.API.Mini.Models.DiskData", b =>
                {
                    b.HasOne("MS.API.Mini.Models.Agents", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("MS.API.Mini.Models.SystemMetric", b =>
                {
                    b.HasOne("MS.API.Mini.Models.Agents", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });
#pragma warning restore 612, 618
        }
    }
}
